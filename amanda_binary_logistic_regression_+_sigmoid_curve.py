# -*- coding: utf-8 -*-
"""Amanda - binary logistic regression + sigmoid curve.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oECp3VVbUAmgVSg_t5C0ZThiVIfiiWSk
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt

table = pd.read_csv("data/polling_site_data/clean_precincts_with_polling_site.csv")
table.head()

table = pd.get_dummies(table,drop_first=True)
table.sample(5)

"""Firstly, in order to do binary logistic regression on the dataset, the dataset will need to be trained[(Li, 2017)](https://https://towardsdatascience.com/building-a-logistic-regression-in-python-step-by-step-becd4d56c9c8#:~:text=Logistic%20Regression%20is%20a%20Machine,%2C%20failure%2C%20etc.)because the dataset contains a large number of samples. """

X_train, X_test, y_train, y_test = train_test_split(table.drop('Polling Sites', axis=1), table['Polling Sites'])

"""In this section below, """

LogReg = LogisticRegression()
LogReg.fit(X_train,y_train)

table = pd.read_csv("/content/Precinct - Combined.csv")
table.head()

"""Creating the logit(odd) curve. Using Black population density as an example."""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,12]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)

plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Black Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""Now, we are plotting the logistic regression graph with sigmoid curve for all racial groups

1. Hispanic
"""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,10]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Hispanic Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""2. White"""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,11]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('White Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""3. Black"""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,12]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Black Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""4. Asian"""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,13]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Asian Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""5. Mixed"""

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,14]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Mixed Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()

"""6. Others """

def model (x):
  return 1/(1+np.exp(-x))
x1 = np.linspace(0,1,num=400)
y1 = model(x1)

 
x = table.iloc[:,15]
y = table.iloc[:,16]
print(x)
model = LogisticRegression(solver='liblinear', random_state=0)
plt.scatter(x,y)
plt.scatter(x1,y1)
plt.title('Others Population Density & Polling Sites')
plt.xlabel('Population Density')
plt.ylabel('Odds Ratio of Polling Sites')
plt.show()